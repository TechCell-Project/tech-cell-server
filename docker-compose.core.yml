version: '3'

services:
    swag:
        build:
            context: ./containers/swag
            dockerfile: Dockerfile
        container_name: swag
        cap_add:
            - NET_ADMIN
        environment:
            - PUID=${PUID:-1001}
            - PGID=${PGID:-1002}
            - TZ=Etc/UTC
            - URL=techcell.cloud
            - SUBDOMAINS=api, socket, docs, server, design
            - VALIDATION=http
            - CERTPROVIDER=zerossl #optional
            - DNSPLUGIN=cloudflare #optional
            # - DUCKDNSTOKEN=<token> #optional
            - EMAIL=teams@techcell.cloud #optional
            - ONLY_SUBDOMAINS=true #optional
            # - EXTRA_DOMAINS=<extradomains> #optional
            - STAGING=false #optional
        volumes:
            - ./containers/swag/www:/config/www
            - ./containers/swag/nginx/proxy-confs:/config/nginx/proxy-confs
            - ./containers/swag/nginx/nginx.conf:/config/nginx/nginx.conf
            - ./ssl/letsencrypt:/config/etc/letsencrypt # mount ssl key from container to work dir
        ports:
            - 80:80
            - 443:443
        networks:
            - techcell_backend
        restart: unless-stopped

    haproxy:
        user: '${PUID}:${PGID}'
        build:
            context: ./containers/haproxy
            dockerfile: Dockerfile
        container_name: haproxy
        depends_on:
            - rabbitmq1
            - rabbitmq2
            - rabbitmq3
            - mongodb-primary
            - mongodb-secondary
            - mongodb-arbiter
            - redis
        ports:
            - 1936:1936
            - 5672:5672
            - 15672:15672
            - 6379:6379
            - 27017:27017
        volumes:
            - ./containers/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
            - ./ssl/letsencrypt:/swag-config/etc/letsencrypt
        networks:
            - techcell_backend
        restart: unless-stopped

    rabbitmq1:
        container_name: rabbitmq1
        build:
            context: ./containers/rabbitmq
            dockerfile: Dockerfile
        hostname: rabbitmq1
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
            - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
            - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
        networks:
            - techcell_backend
        restart: unless-stopped
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3

    rabbitmq2:
        container_name: rabbitmq2
        build:
            context: ./containers/rabbitmq
            dockerfile: Dockerfile
        hostname: rabbitmq2
        depends_on:
            - rabbitmq1
        environment:
            - JOIN_CLUSTER_HOST=rabbitmq1
            - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
        networks:
            - techcell_backend
        restart: unless-stopped
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3

    rabbitmq3:
        container_name: rabbitmq3
        build:
            context: ./containers/rabbitmq
            dockerfile: Dockerfile
        hostname: rabbitmq3
        depends_on:
            - rabbitmq1
        environment:
            - JOIN_CLUSTER_HOST=rabbitmq1
            - RABBITMQ_ERLANG_COOKIE=${RABBITMQ_ERLANG_COOKIE}
        networks:
            - techcell_backend
        restart: unless-stopped
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 30s
            timeout: 30s
            retries: 3

    mongodb-primary:
        container_name: mongodb-primary
        image: docker.io/bitnami/mongodb:5.0
        environment:
            - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
            - MONGODB_REPLICA_SET_MODE=primary
            - MONGODB_ROOT_PASSWORD=${SET_MONGODB_ROOT_PASSWORD}
            - MONGODB_REPLICA_SET_KEY=${SET_MONGODB_REPLICA_SET_KEY}
        env_file:
            - .env
        volumes:
            - 'mongodb_master_data:/bitnami/mongodb'
        networks:
            - techcell_backend
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
            interval: 30s
            timeout: 10s
            retries: 3

    mongodb-secondary:
        container_name: mongodb-secondary
        image: docker.io/bitnami/mongodb:5.0
        depends_on:
            - mongodb-primary
        environment:
            - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
            - MONGODB_REPLICA_SET_MODE=secondary
            - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
            - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=${SET_MONGODB_ROOT_PASSWORD}
            - MONGODB_REPLICA_SET_KEY=${SET_MONGODB_REPLICA_SET_KEY}
        env_file:
            - .env
        networks:
            - techcell_backend
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
            interval: 30s
            timeout: 10s
            retries: 3

    mongodb-arbiter:
        container_name: mongodb-arbiter
        image: docker.io/bitnami/mongodb:5.0
        depends_on:
            - mongodb-primary
        environment:
            - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
            - MONGODB_REPLICA_SET_MODE=arbiter
            - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
            - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=${SET_MONGODB_ROOT_PASSWORD}
            - MONGODB_REPLICA_SET_KEY=${SET_MONGODB_REPLICA_SET_KEY}
        env_file:
            - .env
        networks:
            - techcell_backend
        restart: unless-stopped
        healthcheck:
            test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
            interval: 30s
            timeout: 10s
            retries: 3

    redis:
        container_name: redis
        hostname: redis
        image: docker.io/bitnami/redis:7.2
        environment:
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
        ports:
            - 6379
        volumes:
            - 'redis_data:/bitnami/redis/data'
        restart: unless-stopped
        networks:
            techcell_backend:

    redis-insight:
        container_name: redis-insight
        hostname: redis-insight
        image: redislabs/redisinsight:latest
        ports:
            - 8001
        volumes:
            - redis-insight_data:/db
        restart: unless-stopped
        networks:
            techcell_backend:

networks:
    techcell_backend:

volumes:
    mongodb_master_data:
        driver: local
    rabbitmq_data:
        driver: local
    redis_data:
        driver: local
    redis-insight_data:
        driver: local
