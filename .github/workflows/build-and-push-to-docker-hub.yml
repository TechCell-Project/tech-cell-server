name: Tech Cell Server CI/CD
run-name: Tech Cell Server CI/CD

on:
    push:
        branches:
            - development
    pull_request:
        branches:
            - update-ci-cd
            - '*'

env:
    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
    COMPOSE_PROJECT_NAME: tech-cell-server

jobs:
    setup:
        runs-on: ubuntu-latest
        steps:
            - name: Set REPO_DIR_ON_SERVER
              run: echo "REPO_DIR_ON_SERVER=${{ secrets.SERVER_SSH_APP_DIR || '~/home/tech-cell/tech-cell-server' }}" >> $GITHUB_ENV

    select-runner:
        runs-on: ubuntu-latest
        outputs:
            runner-label: ${{ steps.set-runner.outputs.runner-label }}

        steps:
            - name: Set runner
              id: set-runner
              run: |
                  # This script checks if the pull request has the label "run-ubuntu-latest" and if so, runs the job on ubuntu-latest.
                  if [ "${{ github.event_name }}" = "pull_request" ]; then
                    labels=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" "${{ github.event.pull_request.url }}/labels")
                    if echo "$labels" | jq -e '.[] | select(.name == "run-ubuntu-latest")' > /dev/null; then
                      echo "runner-label=ubuntu-latest" >> $GITHUB_OUTPUT
                      exit 0
                    elif echo "$labels" | jq -e '.[] | select(.name == "run-self-hosted")' > /dev/null; then
                      echo "runner-label=self-hosted" >> $GITHUB_OUTPUT
                      exit 0
                    fi
                  fi

                  runners=$(curl -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/actions/runners")
                  available=$(echo "$runners" | jq '.runners[] | select(.status == "online" and .busy == false and .labels[] .name == "self-hosted")')
                  if [ -n "$available" ]; then
                    echo "runner-label=self-hosted" >> $GITHUB_OUTPUT
                  else
                    echo "runner-label=ubuntu-latest" >> $GITHUB_OUTPUT
                  fi

    build-and-push-to-dockerhub:
        if: false
        needs: select-runner
        runs-on: ${{ needs.select-runner.outputs.runner-label }}

        steps:
            - name: Log runner label
              run: echo "Running on runner ${{ needs.select-runner.outputs.runner-label }}"

            - name: Checkout code
              uses: actions/checkout@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ env.DOCKERHUB_USERNAME }}
                  password: ${{ env.DOCKERHUB_PASSWORD }}

            - name: Free disk space up
              if: ${{ needs.select-runner.outputs.runner-label == 'ubuntu-latest' }}
              run: rm -rf /opt/hostedtoolcache

            - name: 'Create .env file'
              run: |
                  touch .env
                  echo COMPOSE_PROJECT_NAME= ${{ env.COMPOSE_PROJECT_NAME }} >> .env
                  echo CURRENT_USER= ${{ env.CURRENT_USER }} >> .env
                  echo DOCKER_GROUP= ${{ env.DOCKER_GROUP }} >> .env
                  cat .env

            - name: Build and push images
              run: |
                  docker compose -f docker-compose.prod.yml build --no-cache
                  docker compose -f docker-compose.prod.yml push

            - name: Remove .env file
              run: |
                  rm .env

    deploy-to-server:
        needs: [select-runner, setup]
        runs-on: ${{ needs.select-runner.outputs.runner-label }}

        steps:
            - name: Execute remote ssh commands
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_SSH_HOST }}
                  username: ${{ secrets.SERVER_SSH_USERNAME }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      echo "REPO_DIR_ON_SERVER: ${{ env.REPO_DIR_ON_SERVER }}"
                      pwd
                      if [ -d "${{ env.REPO_DIR_ON_SERVER }}" ]; then
                          if [ ! -d "${{ env.REPO_DIR_ON_SERVER }}/.git" ]; then
                              rm -rf ${{ env.REPO_DIR_ON_SERVER }}
                              git clone https://github.com/${{ github.repository }}.git ${{ env.REPO_DIR_ON_SERVER }} || { echo "Failed to clone repository"; exit 1; }
                          fi
                      else
                          git clone https://github.com/${{ github.repository }}.git ${{ env.REPO_DIR_ON_SERVER }} || { echo "Failed to clone repository"; exit 1; }
                      fi
                      cd ${{ env.REPO_DIR_ON_SERVER }} || { echo "Failed to change to directory"; exit 1; }
                      echo "${{ secrets.SERVER_SSH_ENV_FILE }}" > .env || { echo "Failed to create .env file"; exit 1; }
                      git pull origin development || { echo "Failed to pull latest changes"; exit 1; }
                      yarn update:prod || { echo "Failed to update production"; exit 1; }
