name: Tech Cell Server CI/CD
run-name: Tech Cell Server CI/CD

on:
    push:
        branches:
            - development
    pull_request:
        branches: ['*']

env:
    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
    COMPOSE_PROJECT_NAME: tech-cell-server

jobs:
    automation-tests:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Use Node.js 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: 18.x

            - name: Install dependencies
              run: yarn install

            - name: Build all services
              run: yarn build:all

            - name: Run tests
              run: yarn test

    build-and-push-to-dockerhub:
        needs: [automation-tests]
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ env.DOCKERHUB_USERNAME }}
                  password: ${{ env.DOCKERHUB_PASSWORD }}

            - name: Free disk space up
              run: rm -rf /opt/hostedtoolcache

            - name: 'Create .env file'
              run: |
                  touch .env
                  echo COMPOSE_PROJECT_NAME= ${{ env.COMPOSE_PROJECT_NAME }} >> .env
                  echo COMPOSE_TAG= ${{ github.sha }} >> .env
                  cat .env

            - name: Build and push images
              run: |
                  docker compose -f docker-compose.prod.yml build
                  docker compose -f docker-compose.prod.yml push

            - name: Remove .env file
              run: |
                  rm .env

    deploy-to-server:
        needs: [automation-tests, build-and-push-to-dockerhub]
        runs-on: ubuntu-latest

        steps:
            - name: Download last successful artifacts
              uses: dawidd6/action-download-artifact@v3
              with:
                  workflow: tech-cell-server-ci-cd.yml
                  name: deployment-artifact
                  path: .
              continue-on-error: true

            - name: Setup repository directory
              shell: bash
              run: echo "repo_dir_on_server=/home/${{ secrets.SERVER_SSH_USERNAME }}/tech-cell-server" >> $GITHUB_OUTPUT
              id: set_repo_dir

            - name: Extract branch name
              shell: bash
              run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
              id: extract_branch

            - name: Execute remote ssh commands
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SERVER_SSH_HOST }}
                  username: ${{ secrets.SERVER_SSH_USERNAME }}
                  key: ${{ secrets.SERVER_SSH_KEY }}
                  script: |
                      export NVM_DIR=~/.nvm
                      source ~/.nvm/nvm.sh

                      if [ -d "${{ steps.set_repo_dir.outputs.repo_dir_on_server }}" ]; then
                          if [ ! -d "${{ steps.set_repo_dir.outputs.repo_dir_on_server }}/.git" ]; then
                              rm -rf ${{ steps.set_repo_dir.outputs.repo_dir_on_server }}
                              git clone https://github.com/${{ github.repository }}.git ${{ steps.set_repo_dir.outputs.repo_dir_on_server }} || { echo "Failed to clone repository"; exit 1; }
                          fi
                      else
                          git clone https://github.com/${{ github.repository }}.git ${{ steps.set_repo_dir.outputs.repo_dir_on_server }} || { echo "Failed to clone repository"; exit 1; }
                      fi

                      cd ${{ steps.set_repo_dir.outputs.repo_dir_on_server }} || { echo "Failed to change to directory"; exit 1; }
                      echo "${{ secrets.SERVER_SSH_ENV_FILE }}" > .env || { echo "Failed to create .env file"; exit 1; }

                      if [ "$(git rev-parse --abbrev-ref HEAD)" != "${{ steps.extract_branch.outputs.branch }}" ]; then
                        git switch ${{ steps.extract_branch.outputs.branch }} || { echo "Failed to switch to branch"; exit 1; }
                      fi    

                      git reset --hard || { echo "Failed to reset hard"; exit 1; }
                      git pull origin ${{ steps.extract_branch.outputs.branch }} || { echo "Failed to pull latest changes"; exit 1; }
                      yarn install || { echo "Failed to install dependencies"; exit 1; }
                      yarn get-logs || { echo "Failed to get logs"; }

                      echo "COMPOSE_TAG=${{ github.sha }}" >> .env || { echo "Failed to set COMPOSE_TAG"; exit 1; }

                      docker compose -f ./docker-compose.prod.yml pull || { echo "Failed to pull production"; exit 1; }

                      if docker compose -f ./docker-compose.prod.yml up -d; then
                          echo "Deployment successful saving new version to artifact: ${{ github.sha }}"
                          echo "${{ github.sha }}" > deployment-artifact.txt
                      else
                          echo "Deployment failed, rolling back to previous version"
                          if [ -f deployment-artifact.txt ]; then
                              previous_sha=$(cat deployment-artifact.txt)
                              echo "COMPOSE_TAG=$previous_sha" >> .env || { echo "Failed to set COMPOSE_TAG"; exit 1; }
                              docker compose -f ./docker-compose.prod.yml pull || { echo "Failed to pull previous production"; exit 1; }
                              docker compose -f ./docker-compose.prod.yml up -d || { echo "Failed to up previous production"; exit 1; }
                          else
                              echo "No previous version found, rollback failed"
                          fi
                      fi

                      docker system prune -a -f || { echo "Failed to prune docker system"; exit 1; }

            - name: Upload deployment artifact
              uses: actions/upload-artifact@v2
              with:
                  name: deployment-artifact
                  path: deployment-artifact.txt
